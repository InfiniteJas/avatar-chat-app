// server.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –•–ê–†–î–ö–û–î–û–ú –ò –í–°–ï–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò)
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// üõë –í–ê–®–ò –î–ê–ù–ù–´–ï –í–°–¢–ê–í–õ–ï–ù–´ –ü–†–Ø–ú–û –í –ö–û–î
const AZURE_OPENAI_ENDPOINT = "https://a-ass55.openai.azure.com/";
const AZURE_OPENAI_API_KEY = "FBx0qou5mQpzUs5cW4itbIk42WlgAj8TpmAjbw5uXPDhp5ckYg2QJQQJ99BIACHYHv6XJ3w3AAABACOGYhoG";
const NITEC_AI_BEARER_TOKEN = "sk-196c1fe7e5be40b2b7b42bc235c49147";
const BING_SEARCH_API_KEY = "6f6pWKgZJIax7N63ncfwdK0OIqjxAMmNmLDm8Crm7UpiDfd38bTbJQQJ99BIACHYHv6XJ3w3AAAEACOGAc8C";

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'chat.html'));
});

// --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è ---
const getAzureApiUrl = (path) => `${AZURE_OPENAI_ENDPOINT.replace(/\/$/, '')}/openai/${path}?api-version=2024-05-01-preview`;
const getHeaders = () => ({ 'api-key': AZURE_OPENAI_API_KEY, 'Content-Type': 'application/json' });

const proxyRequest = async (req, res, method, azurePath) => {
    try {
        const response = await axios({
            method: method,
            url: getAzureApiUrl(azurePath),
            data: req.body,
            headers: getHeaders(),
        });
        res.status(response.status).json(response.data);
    } catch (error) {
        const status = error.response ? error.response.status : 500;
        const data = error.response ? error.response.data : { message: error.message };
        console.error(`Error proxying to ${azurePath}:`, error.response ? error.response.data : "Unknown error");
        res.status(status).json({ error: 'Proxy request failed', details: data });
    }
};

const proxyGetRequest = (req, res, azurePath) => {
    axios.get(getAzureApiUrl(azurePath), { headers: getHeaders() })
        .then(response => res.status(response.status).json(response.data))
        .catch(error => {
            const status = error.response ? error.response.status : 500;
            const data = error.response ? error.response.data : { message: error.message };
            console.error('Error proxying GET request:', error.response ? error.response.data : "Unknown error");
            res.status(status).json({ error: 'Proxy GET request failed', details: data });
        });
};

// --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º Azure ---
app.post('/api/threads', (req, res) => proxyRequest(req, res, 'POST', 'threads'));
app.post('/api/threads/:threadId/messages', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/messages`));
app.post('/api/threads/:threadId/runs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs`));
app.get('/api/threads/:threadId/runs/:runId', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/runs/${req.params.runId}`));
app.post('/api/threads/:threadId/runs/:runId/submit_tool_outputs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs/${req.params.runId}/submit_tool_outputs`));
app.get('/api/threads/:threadId/messages', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/messages`));


// +++++++++++++ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• –§–£–ù–ö–¶–ò–ô +++++++++++++
app.post('/api/assistant', async (req, res) => {
    const { function_name, arguments } = req.body;

    console.log(`\n=============================================`);
    console.log(`  >>> –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò <<<  `);
    console.log(`- –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: ${function_name}`);
    console.log(`- –ê—Ä–≥—É–º–µ–Ω—Ç—ã: ${JSON.stringify(arguments)}`);
    console.log(`=============================================`);

    // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø NITEC-AI ---
    if (function_name === 'get_external_info') {
        try {
            const { source_model, user_query } = arguments;
            console.log(`--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ nitec-ai.kz... ---`);
            const nitecResponse = await axios.post(
                'https://nitec-ai.kz/api/chat/completions',
                { model: source_model, stream: false, messages: [{ role: 'user', content: user_query }] },
                { headers: { 'Authorization': `Bearer ${NITEC_AI_BEARER_TOKEN}`, 'Content-Type': 'application/json' } }
            );
            const finalContent = nitecResponse.data.choices[0].message.content;
            console.log(`--- –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${source_model} ---`);
            return res.json({ success: true, result: finalContent });
        } catch (error) {
            console.error("!!! –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ nitec-ai:", error.message);
            return res.json({ success: false, error: error.message });
        }
    }

    // --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–ï–ë-–ü–û–ò–°–ö–ê ---
    if (function_name === 'perform_web_search') {
        try {
            const { search_query } = arguments;
            console.log(`--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Bing Search API: "${search_query}" ---`);
            const bingResponse = await axios.get('https://api.bing.microsoft.com/v7.0/search', {
                headers: { 'Ocp-Apim-Subscription-Key': BING_SEARCH_API_KEY },
                params: { q: search_query, count: 3, mkt: 'ru-RU' } // –ò—â–µ–º 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            });
            const searchResults = bingResponse.data.webPages.value
                .map((page, index) => `–ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1}:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${page.name}\nURL: ${page.url}\n–§—Ä–∞–≥–º–µ–Ω—Ç: ${page.snippet}`)
                .join('\n\n');
            
            console.log(`--- –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bing Search ---`);
            return res.json({ success: true, result: searchResults || "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." });
        } catch (error) {
            console.error("!!! –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Bing Search:", error.message);
            return res.json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞." });
        }
    }
    
    // –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    return res.status(400).json({ success: false, error: `Unknown function called: ${function_name}` });
});
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
