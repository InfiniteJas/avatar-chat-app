// server.js (–í–ï–†–°–ò–Ø –î–õ–Ø –î–ï–ú–û –° –•–ê–†–î–ö–û–î–û–ú)
require('dotenv').config(); // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ
const express = require('express');
const axios = require('axios');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// üõë –í–ù–ò–ú–ê–ù–ò–ï: –ö–õ–Æ–ß–ò –ó–ê–•–ê–†–î–ö–û–ñ–ï–ù–´ –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò!
// –≠–¢–û –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û –î–õ–Ø –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò.
// –ü–û–°–õ–ï –î–ï–ú–û –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –°–¢–†–û–ö–ò –ù–ê process.env.VAR_NAME
// –ò –î–û–ë–ê–í–¨–¢–ï –ö–õ–Æ–ß–ò –í –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø –ù–ê RAILWAY.
const AZURE_OPENAI_ENDPOINT = "https://ass-mini.openai.azure.com/";
const AZURE_OPENAI_API_KEY = "ojOz45IiCJ45ETnaz4Q50bEyVmYLfjk2K2ex5fhtGsAndInu6olZJQQJ99BIACHYHv6XJ3w3AAABACOGs4er"; // <-- –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ù–û–í–´–ô –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–õ–Æ–ß!

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.use(cors());
app.use(express.json());
app.use(express.static('public')); // –û—Ç–¥–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

// --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è ---
const getAzureApiUrl = (path) => `${AZURE_OPENAI_ENDPOINT}/openai/${path}?api-version=2024-05-01-preview`;
const getHeaders = () => ({ 'api-key': AZURE_OPENAI_API_KEY, 'Content-Type': 'application/json' });

const proxyRequest = async (req, res, method, azurePath) => {
    try {
        const response = await axios({
            method: method,
            url: getAzureApiApiUrl(azurePath),
            data: req.body,
            headers: getHeaders(),
        });
        res.status(response.status).json(response.data);
    } catch (error) {
        const status = error.response ? error.response.status : 500;
        const data = error.response ? error.response.data : { message: error.message };
        console.error(`Error proxying to ${azurePath}:`, data);
        res.status(status).json({ error: 'Proxy request failed', details: data });
    }
};

const proxyGetRequest = (req, res, azurePath) => {
     axios.get(getAzureApiUrl(azurePath), { headers: getHeaders() })
        .then(response => res.status(response.status).json(response.data))
        .catch(error => {
            const status = error.response ? error.response.status : 500;
            const data = error.response ? error.response.data : { message: error.message };
            console.error('Error proxying GET request:', data);
            res.status(status).json({ error: 'Proxy GET request failed', details: data });
        });
};


// --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∫—Å–∏ ---
app.post('/api/threads', (req, res) => proxyRequest(req, res, 'POST', 'threads'));
app.post('/api/threads/:threadId/messages', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/messages`));
app.post('/api/threads/:threadId/runs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs`));
app.get('/api/threads/:threadId/runs/:runId', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/runs/${req.params.runId}`));
app.post('/api/threads/:threadId/runs/:runId/submit_tool_outputs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs/${req.params.runId}/submit_tool_outputs`));
app.get('/api/threads/:threadId/messages', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/messages`));

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
