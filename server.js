// server.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –û–ë–†–ê–ë–û–¢–ö–û–ô –§–£–ù–ö–¶–ò–ô)
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// üõë –í–ê–®–ò –î–ê–ù–ù–´–ï –í–°–¢–ê–í–õ–ï–ù–´ –ü–†–Ø–ú–û –í –ö–û–î
const AZURE_OPENAI_ENDPOINT = "https://a-ass55.openai.azure.com/";
const AZURE_OPENAI_API_KEY = "FBx0qou5mQpzUs5cW4itbIk42WlgAj8TpmAjbw5uXPDhp5ckYg2QJQQJ99BIACHYHv6XJ3w3AAABACOGYhoG"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–ª—é—á
const NITEC_AI_BEARER_TOKEN = "sk-196c1fe7e5be40b2b7b42bc235c49147"; // <-- –í–ê–® –ö–õ–Æ–ß –î–õ–Ø NITEC-AI

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'chat.html'));
});

// --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è ---
const getAzureApiUrl = (path) => `${AZURE_OPENAI_ENDPOINT.replace(/\/$/, '')}/openai/${path}?api-version=2024-05-01-preview`;
const getHeaders = () => ({ 'api-key': AZURE_OPENAI_API_KEY, 'Content-Type': 'application/json' });

const proxyRequest = async (req, res, method, azurePath) => {
    try {
        if (!AZURE_OPENAI_ENDPOINT || !AZURE_OPENAI_API_KEY) {
            console.error("Azure OpenAI credentials are not set in the code.");
            return res.status(500).json({ error: "Server configuration error: Credentials not set." });
        }
        const response = await axios({
            method: method,
            url: getAzureApiUrl(azurePath),
            data: req.body,
            headers: getHeaders(),
        });
        res.status(response.status).json(response.data);
    } catch (error) {
        const status = error.response ? error.response.status : 500;
        const data = error.response ? error.response.data : { message: error.message };
        console.error(`Error proxying to ${azurePath}:`, error.response ? error.response.data : "Unknown error");
        res.status(status).json({ error: 'Proxy request failed', details: data });
    }
};

const proxyGetRequest = (req, res, azurePath) => {
    if (!AZURE_OPENAI_ENDPOINT || !AZURE_OPENAI_API_KEY) {
        console.error("Azure OpenAI credentials are not set in the code.");
        return res.status(500).json({ error: "Server configuration error: Credentials not set." });
    }
    axios.get(getAzureApiUrl(azurePath), { headers: getHeaders() })
        .then(response => res.status(response.status).json(response.data))
        .catch(error => {
            const status = error.response ? error.response.status : 500;
            const data = error.response ? error.response.data : { message: error.message };
            console.error('Error proxying GET request:', error.response ? error.response.data : "Unknown error");
            res.status(status).json({ error: 'Proxy GET request failed', details: data });
        });
};

// --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º Azure ---
app.post('/api/threads', (req, res) => proxyRequest(req, res, 'POST', 'threads'));
app.post('/api/threads/:threadId/messages', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/messages`));
app.post('/api/threads/:threadId/runs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs`));
app.get('/api/threads/:threadId/runs/:runId', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/runs/${req.params.runId}`));
app.post('/api/threads/:threadId/runs/:runId/submit_tool_outputs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs/${req.params.runId}/submit_tool_outputs`));
app.get('/api/threads/:threadId/messages', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/messages`));


// +++++++++++++ –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ó–û–í–ê –§–£–ù–ö–¶–ò–ô +++++++++++++
// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ chat.js, –∫–æ–≥–¥–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞—Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
// +++++++++++++ –ù–û–í–´–ô –ë–õ–û–ö –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ó–û–í–ê –§–£–ù–ö–¶–ò–ô +++++++++++++
// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ chat.js, –∫–æ–≥–¥–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞—Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
app.post('/api/assistant', async (req, res) => {
    const { function_name, arguments } = req.body;

    if (function_name === 'get_external_info') {
        try {
            const { source_model, user_query } = arguments;

            // --- –ù–ê–ß–ê–õ–û: –ù–ê–®–ò –ù–û–í–´–ï, –ë–û–õ–ï–ï –ü–û–î–†–û–ë–ù–´–ï –õ–û–ì–ò ---
            console.log("\n=============================================");
            console.log("  >>> –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò (NITEC-AI) <<<  ");
            console.log("=============================================");
            console.log(`- –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: ${function_name}`);
            console.log(`- –¶–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å: ${source_model}`);
            console.log(`- –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${user_query}"`);
            console.log("--- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ nitec-ai.kz... ---");
            // --- –ö–û–ù–ï–¶ –ù–û–í–´–• –õ–û–ì–û–í ---

            const nitecResponse = await axios.post(
                'https://nitec-ai.kz/api/chat/completions',
                {
                    model: source_model,
                    stream: false, // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–µ –ø–æ —á–∞—Å—Ç—è–º
                    messages: [{ role: 'user', content: user_query }]
                },
                {
                    headers: {
                        'Authorization': `Bearer ${NITEC_AI_BEARER_TOKEN}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            const finalContent = nitecResponse.data.choices[0].message.content;

            // --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û–ì–û –û–¢–í–ï–¢–ê ---
            console.log("--- –ü–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç nitec-ai.kz ---");
            console.log(`- –û—Ç–≤–µ—Ç –æ—Ç ${source_model}: "${finalContent.substring(0, 200)}..."`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            console.log("=============================================\n");
            // --- –ö–û–ù–ï–¶ ---
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ chat.js
            return res.json({ success: true, result: finalContent });

        } catch (error) {
            console.error("!!! –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ nitec-ai:", error.message);
            return res.json({ success: false, error: error.message });
        }
    }

    // –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    return res.status(400).json({ success: false, error: 'Unknown function called' });
});
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
