// server.js (–í–†–ï–ú–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –•–ê–†–î–ö–û–î–û–ú –î–õ–Ø –¢–ï–°–¢–ê)
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// üõë –í–ù–ò–ú–ê–ù–ò–ï: –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø –¢–ï–°–¢–ê!
// –ö–ª—é—á–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä—è–º–æ –≤ –∫–æ–¥. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –≠–¢–û –í –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò!
// –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –≤–µ—Ä–Ω–∏—Ç–µ –∫–æ–¥ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é process.env –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ Railway.
const AZURE_OPENAI_ENDPOINT = "https://ass-mini.openai.azure.com/"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –≤–µ—Ä–Ω—ã–π –∏ –±–µ–∑ –æ–ø–µ—á–∞—Ç–æ–∫
const AZURE_OPENAI_API_KEY = "EIoIUPiWHfwipyE98dOEbS2C29O5ipQCOKFzvoYw6Wfis48p9ufTJQQJ99BIACHYHv6XJ3w3AAAYACOGHLHa"; // <-- –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à –ê–ö–¢–£–ê–õ–¨–ù–´–ô, –ù–û–í–´–ô –∫–ª—é—á

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'chat.html'));
});

// --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è ---
const getAzureApiUrl = (path) => `${AZURE_OPENAI_ENDPOINT.replace(/\/$/, '')}/openai/${path}?api-version=2024-05-01-preview`;
const getHeaders = () => ({ 'api-key': AZURE_OPENAI_API_KEY, 'Content-Type': 'application/json' });

const proxyRequest = async (req, res, method, azurePath) => {
    try {
        if (!AZURE_OPENAI_ENDPOINT || !AZURE_OPENAI_API_KEY || AZURE_OPENAI_API_KEY === "–í–ê–®_–ù–û–í–´–ô_–°–ï–ö–†–ï–¢–ù–´–ô_–ö–õ–Æ–ß") {
            console.error("Azure OpenAI credentials are not set in the code.");
            return res.status(500).json({ error: "Server configuration error: Credentials not set." });
        }
        const response = await axios({
            method: method,
            url: getAzureApiUrl(azurePath),
            data: req.body,
            headers: getHeaders(),
        });
        res.status(response.status).json(response.data);
    } catch (error) {
        const status = error.response ? error.response.status : 500;
        const data = error.response ? error.response.data : { message: error.message };
        console.error(`Error proxying to ${azurePath}:`, data);
        res.status(status).json({ error: 'Proxy request failed', details: data });
    }
};

const proxyGetRequest = (req, res, azurePath) => {
    if (!AZURE_OPENAI_ENDPOINT || !AZURE_OPENAI_API_KEY || AZURE_OPENAI_API_KEY === "–í–ê–®_–ù–û–í–´–ô_–°–ï–ö–†–ï–¢–ù–´–ô_–ö–õ–Æ–ß") {
        console.error("Azure OpenAI credentials are not set in the code.");
        return res.status(500).json({ error: "Server configuration error: Credentials not set." });
    }
    axios.get(getAzureApiUrl(azurePath), { headers: getHeaders() })
        .then(response => res.status(response.status).json(response.data))
        .catch(error => {
            const status = error.response ? error.response.status : 500;
            const data = error.response ? error.response.data : { message: error.message };
            console.error('Error proxying GET request:', data);
            res.status(status).json({ error: 'Proxy GET request failed', details: data });
        });
};

// --- API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ---
app.post('/api/threads', (req, res) => proxyRequest(req, res, 'POST', 'threads'));
app.post('/api/threads/:threadId/messages', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/messages`));
app.post('/api/threads/:threadId/runs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs`));
app.get('/api/threads/:threadId/runs/:runId', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/runs/${req.params.runId}`));
app.post('/api/threads/:threadId/runs/:runId/submit_tool_outputs', (req, res) => proxyRequest(req, res, 'POST', `threads/${req.params.threadId}/runs/${req.params.runId}/submit_tool_outputs`));
app.get('/api/threads/:threadId/messages', (req, res) => proxyGetRequest(req, res, `threads/${req.params.threadId}/messages`));

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
